// Marco Ermini - March 2021 for ASU CSE531 Course
// Do not leech!
// Implementation of a banking's branches/customers RPC synchronisation using GRPC and Python
// Built with python 3.8 with GRPC and GRPC-tools libraries; may work with other Python versions


syntax = "proto3";

package app;

service Banking {
	rpc MsgDelivery(MsgDeliveryRequest) returns (MsgDeliveryResponse) { }
	rpc RequestWriteSet(WriteSetRequest) returns (WriteSetResponse) { }
	rpc CheckWriteSet(WriteSetRequest) returns (CheckSetResponse) { }
//	rpc GetEvents (EventsRequest) returns (EventsResponse) {}
}

enum Operation {
	QUERY 			= 0;		// Query amount of $$
	DEPOSIT			= 1;		// Deposit amounf of $$
	WITHDRAW		= 2;		// Withdraw amount of $$
}

enum ReturnCode {
	SUCCESS 		= 0;		// Query, Deposit, or Withdraw succeeded
	FAILURE			= 1;		// Query, Deposit, or Withdraw failed
	ERROR			= 2;		// Error in the operation
}

enum SourceType {
	CUSTOMER 		= 0;		// Query, Deposit, or Withdraw succeeded
	BRANCH			= 1;		// Query, Deposit, or Withdraw failed
}

message WriteSetStruct  {		// Struct WriteID
	uint32 S_ID		= 1;		// Original Customer Source ID 
	uint64 ProgrID	= 2;		// Progressive ID of the write set
}

message WriteSetRequest  {
	uint32 S_ID		= 1;		// Original Customer Source ID 
	uint64 LAST_ID	= 2;		// ID requested by the Customer
	uint64 Clock	= 3;		// Local clock in the case of logical clock use
}

message CheckSetResponse  {
	bool IS_LAST	= 1;		// Returns True if the current WriteID/Customer tuple of the Branch is the last
}

message WriteSetResponse  {
	uint64 Clock	= 1;		// Local clock in the case of logical clock use
	uint32 S_ID		= 2;		// Original Customer Source ID
	uint64 ProgrID	= 3;		// Progressive ID returned to the Customer
}

message MsgDeliveryRequest  {
	uint32 REQ_ID	= 1;		// Request ID
	Operation OP	= 2;		// Operation requested (query, deposit, withdraw)
	double Amount 	= 3;		// Amount involved in the operation
	uint32 S_TYPE	= 4;		// Source Type (Customer or Branch)
	uint32 S_ID		= 5;		// Source ID
	uint32 D_ID		= 6;		// Branch Destination ID
	uint64 Clock	= 7;		// Local clock in the case of logical clock use
	uint64 ProgrID	= 8;		// Progressive ID of the write request
//	WriteSetStruct WriteID = 8;	// WriteID passed to the Branch
}

message MsgDeliveryResponse {
	uint32 REQ_ID	= 1;		// Request ID
	ReturnCode RC	= 2;		// Return Code from the operation
	double Amount	= 3;		// Amound of $$ involved
	uint64 Clock	= 4;		// Local clock in the case of logical clock use
	WriteSetStruct WriteID = 5;	// WriteID returned by the Branch
}

// message EventsRequest {}

// message EventsResponse {
// 	repeated Event events = 1;
// }

// message Event {
// 	int64 ID = 1;
// 	string OP = 2;
// 	int64 Clock = 3;
// }