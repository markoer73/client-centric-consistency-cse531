// Marco Ermini - March 2021 for ASU CSE531 Course
// Do not leech!
// Implementation of a banking's branches/customers RPC synchronisation using GRPC and Python
// Built with python 3.8 with GRPC and GRPC-tools libraries; may work with other Python versions


syntax = "proto3";

package app;

service Banking {
	rpc MsgDelivery(MsgDeliveryRequest) returns (MsgDeliveryResponse) {}
//	rpc GetEvents(EventsRequest) returns (EventsResponse) {}
}

enum Operation {
	QUERY 			= 0;		// Query amount of $$
	DEPOSIT			= 1;		// Deposit amounf of $$
	WITHDRAW		= 2;		// Withdraw amount of $$
}

enum ReturnCode {
	SUCCESS 		= 0;		// Query, Deposit, or Withdraw succeeded
	FAILURE			= 1;		// Query, Deposit, or Withdraw failed
	ERROR			= 2;		// Error in the operation
}

message MsgDeliveryRequest  {
	int64 REQ_ID	= 1;		// Branch or Client Request ID
	Operation OP	= 2;		// Operation requested
	int64 Amount 	= 3;		// Amount of $$ involved
	int64 D_ID		= 4;		// Branch  Destination ID
	int64 Clock		= 5;		// Tick clock in the case of logical clock case
}

message MsgDeliveryResponse {
	int64 ID		= 1;		// Branch or Client ID
	ReturnCode RC	= 2;		// Return Code from the operation
	int64 Amount	= 3;		// Amound of $$ involved
	int64 Clock		= 4;		// Tick clock in the case of logical clock case
}

// message EventsRequest {}

// message EventsResponse {
// 	repeated Event events = 1;
// }

// message Event {
// 	int64 ID = 1;
// 	string OP = 2;
// 	int64 Clock = 3;
// }